pipeline {
    agent any

    environment {
        PROD_USERNAME = 'amedikusettor'
        PROD_DIR = '/home/amedikusettor/myflix/video-catalogue'
        DOCKER_IMAGE_NAME = 'video-catalogue-deployment'
        DOCKER_CONTAINER_NAME = 'video-catalogue'
        DOCKER_CONTAINER_PORT = '5001'
        DOCKER_HOST_PORT = '5001'

    }

    stages {
        stage('Load Code to Workspace') {
            steps {
                checkout scm
            }
        }

        stage('Deploy Repo to Secondary Servers') {
            matrix {
                axes {
                    axis {
                        name 'SERVER_IP'
                        values '35.202.82.185', '34.121.216.186'
                    }
                }
                stages {
                    stage('Deploy') {
                        steps {
                            script {

                                sh "echo Packaging files for ${SERVER_IP} ..."
                                sh "ssh -o StrictHostKeyChecking=no ${PROD_USERNAME}@${SERVER_IP} 'cd myflix && rm -r video-catalogue || true'"
                                sh "ssh -o StrictHostKeyChecking=no ${PROD_USERNAME}@${SERVER_IP} 'cd myflix && mkdir video-catalogue || true && cd video-catalogue && mkdir templates || true'"
                                sh "scp -o StrictHostKeyChecking=no Dockerfile ${PROD_USERNAME}@${SERVER_IP}:${PROD_DIR}"
                                sh "scp -o StrictHostKeyChecking=no devopsfinalproject-4d723fcf8c7e.json ${PROD_USERNAME}@${SERVER_IP}:${PROD_DIR}"
                                sh "scp -o StrictHostKeyChecking=no requirements.txt ${PROD_USERNAME}@${SERVER_IP}:${PROD_DIR}"
                                sh "scp -o StrictHostKeyChecking=no app.py ${PROD_USERNAME}@${SERVER_IP}:${PROD_DIR}"
                        
                                sh "scp -o StrictHostKeyChecking=no templates/home_ads.html ${PROD_USERNAME}@${SERVER_IP}:${PROD_DIR}/templates"
                                sh "scp -o StrictHostKeyChecking=no templates/home_paid.html ${PROD_USERNAME}@${SERVER_IP}:${PROD_DIR}/templates"
                                
                                sh 'echo Files transferred to server. Unpacking ...'
                                sh 'echo Repo unloaded on Prod. Server. Preparing to dockerize application ..'
                            }
                        }
                    }

                    stage('Dockerize DB Applications') {
                        steps {
                            script {
                                sh "ssh -o StrictHostKeyChecking=no ${PROD_USERNAME}@${SERVER_IP} 'cd myflix/video-catalogue && docker build -t ${DOCKER_IMAGE_NAME} .'"
                                sh "echo Docker image for videoCatalogue on ${SERVER_IP} rebuilt. Preparing to redeploy container to web..."
                            }
                        }
                    }

                    stage('Redeploy Containers') {
                        steps {
                            script {
                                sh "ssh -o StrictHostKeyChecking=no ${PROD_USERNAME}@${SERVER_IP} 'cd myflix/video-catalogue && docker stop ${DOCKER_CONTAINER_NAME} || echo \"Failed to stop container\"'"
                                sh "ssh -o StrictHostKeyChecking=no ${PROD_USERNAME}@${SERVER_IP} 'cd myflix/video-catalogue && docker rm ${DOCKER_CONTAINER_NAME} || echo \"Failed to remove container\"'"
                                sh "echo Container stopped and removed on ${SERVER_IP}. Preparing to redeploy new version"

                                sh "ssh -o StrictHostKeyChecking=no ${PROD_USERNAME}@${SERVER_IP} 'cd myflix/video-catalogue && docker run -d -p ${DOCKER_HOST_PORT}:${DOCKER_CONTAINER_PORT} --name ${DOCKER_CONTAINER_NAME} ${DOCKER_IMAGE_NAME}'"
                                sh "echo videoCatalogue Microservice Deployed on ${SERVER_IP}!"
                            }
                        }
                    }
                }
            }
        }
    }
}
